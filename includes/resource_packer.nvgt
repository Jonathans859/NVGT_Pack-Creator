class resource_packer {
string packname;
string bass_directory;
string[] file_list;
string[] excludes; //list of files that will be excluded from the pack.
string[] exclude_dirs;
string[] errors;
resource_packer(string&in packname, string&in bass_dir) {
this.packname = packname;
this.bass_directory = bass_dir;
}
void add_exclude(string e, bool directory = false) {
if(!directory and this.excludes.find(e)<0) this.excludes.insert_last(e);
else if(this.exclude_dirs.find(e)<0) this.exclude_dirs.insert_last(e);
}
private void error(string&in error) {
this.errors.insert_last(error);
}
bool create_resource_file(pack@&out p = void) {
this.errors.resize(0);
if(this.file_list.length()<=0) {
this.error("bass directory empty");
return false;
}
pack temp;
if(!temp.open(this.packname, PACK_OPEN_MODE_CREATE)) {
this.error("Unable to open pack for writing");
return false;
}
int count = 0;
for(uint i = 0; i<this.file_list.length(); i+=1) {
string filepath = this.bass_directory+"/"+this.file_list[i];
if(!temp.add_file(filepath, this.file_list[i], true)) {
this.error("Unable to add file "+(i+1)+" of "+this.file_list.length()+". "+filepath);
}
else count += 1;
}
temp.close();
@p = temp;
return count>0;
}
int get_file_list(bool search_recursive = true) {
if(this.bass_directory.empty() or !directory_exists(this.bass_directory)) return 0;
this.file_list = list_files(this.bass_directory, search_recursive, this.exclude_dirs);
if(this.excludes.length()>0) {
for(uint i = 0; i<this.excludes.length(); i+=1) {
for(uint j = 0; j<this.file_list.length(); j+=1) {
if(this.excludes[i] == this.file_list[j]) {
this.file_list.remove_at(j);
continue;
}
}
}
}
return this.file_list.length();
}
}
string[] list_files(string path, bool recursive = true, string[] excluding_dirs = {}) {
string[]@ file_list = find_files(path + "/*");  // Get the files in the current directory
if (!recursive) 
return file_list;  // Return the file list if it's empty or recursive is false
string[] directories = find_directories(path + "/*");  // Get the directories in the current path
if (directories.length() > 0) {
for (uint i = 0; i < directories.length(); i++) {
if(excluding_dirs.find(directories[i])>-1) continue;
string[] sub_files = list_files(path+"/"+directories[i]);
for (uint j = 0; j < sub_files.length(); j++) {
file_list.insert_last(directories[i]+"/"+sub_files[j]);  // Append files from subdirectories
}
}
}
return file_list; 
}
